fanout
A producer/multiple consumer demo in Go.
18:00 20 Mar 2019
Tags: golang, channel, concurrency, demo, producer, consumer, goroutine, context

Michael Lore
Principal Architect, SAP Concur
@ancientlore
https://github.com/ancientlore/fanout

* About Me
- Central Architecture Team at SAP Concur
- Designed the booking engine powering Concur Travel
- Playing with Go since 2010
- Interested in concurrent applications in the travel space
.image media/gopher.png
.background media/plane_bg.png

* Producer/Consumer Demo Application
.image media/diagram.png 300 390
Demonstrates:

- Concurrent execution (goroutines)
- Synchronization and messaging (channels)
- Multi-way concurrent control (select)
- Complete or cancel gracefully (context)

.background media/plane_bg.png

: Better understanding of channels and goroutines. (Must close channel? Buffering?)
: Learn some useful patterns.
: Learn how to do this cleanly (cancel, etc.)

* Review
.background media/plane_bg.png

* Goroutines
Start one:
.play examples/one/main.go /go/,/}/
Start many:
.play examples/many/main.go /for/,/}$/
Better:
.play examples/many2/main.go /for/,/}$/
.background media/plane_bg.png
: In second example, the loop variable captured by function literal. The goroutines don't start until the loop is finished.

* Goroutines and main
Does this work?
.play examples/goroutine/main.go
.background media/plane_bg.png
: No. main exits before the goroutine can run.

* Channels
Declare a channel:

    var c1 chan bool
    var crd <-chan bool
    var cwr chan<- bool

Create a channel:

    c := make(chan bool)

Read from a channel:

    b := <-c

Send on a channel:

    c <- true

.background media/plane_bg.png

: You can declare read-only channel variables and write-only channel variables.
: Does reading a channel block? (Yes, when it's empty.)
: Does sending on a channel block? (Yes, when it's full.)

* Buffered Channels

Create a buffered channel:

    c := make(chan bool, 10)

Usually not needed.

If the buffer isn't full, a context switch isn't necessarily triggered.

.background media/plane_bg.png
: In my experience, buffered channels often masked deadlock situations that were a flaw in the design.
: Know why you are using buffering - there are valid use cases, but often you don't need or want buffering.

* Closing a Channel

Close a channel:

    close(c)

Test for a closed channel while reading:

    b, ok := <-c
    if !ok {
        // Channel was closed
    }

.background media/plane_bg.png

: Do channels NEED to be closed? (Sometimes - not because you need to reclaim a handle, but because they could be blocking other goroutines.)
: Why can they be closed?

* Channel example
This example shows channel behavior.
.play examples/close/main.go
.background media/plane_bg.png
: What does a channel return for b if it is closed?

* Range
You can also use range with channels.
.play examples/range/main.go
.background media/plane_bg.png
: When using range, you must close the channel or the loop never ends.

* Signaling using a channel
What is wrong?
.play examples/signal/main.go
.background media/plane_bg.png
: Only one goroutine ever gets the message that we're done.
: There is a better way.

* Signaling using close(chan)
Using close works better.
.play examples/signal2/main.go
.background media/plane_bg.png
: All goroutines see the channel closed.
: Close is very useful!

* Select
What if I need to wait on multiple channels?
.play examples/select/main.go /func main/,/^}/
.background media/plane_bg.png
: Is this a spin-wait loop? (No, because select blocks.)

* Select with a timeout
In this example, I'll only wait 100ms for an answer:
.play examples/timeout/main.go /func main/,/^}/
.background media/plane_bg.png
: time.Timer exposes a channel that is signaled when the timeout occurs.

* Context
"A Context carries a deadline, a cancelation signal, and other values across API boundaries.
Context's methods may be called by multiple goroutines simultaneously."
.caption context.Context
.iframe https://golang.org/pkg/context/#Context 400 960
.background media/plane_bg.png
: By convention a context is the first argument to a function.
: Contexts are chained together in a tree starting with a root context.

* Context with timeout
In this example, I'll only wait 100ms for an answer:
.play examples/context/main.go /func rcv/,/Sleep.*$/
Multiple goroutines can use this same context and timeout.
.background media/plane_bg.png

* Code
.background media/plane_bg.png

* Main
We're creating a simple producer-consumer demo application.
.code -numbers main.go /Start the producer/,/consumer\(/
The producer sends items over the returned channel, and the consumer consumes
those items on a configurable number of goroutines. The consumer blocks
until it is finished.

We capture kill and interrupt signals (using os/signal) to cleanly cancel processing.
We end the consumer goroutines gracefully by closing the producer channel.
.background media/plane_bg.png

* Producer
.code -numbers main.go /func producer/,/^}/
.background media/plane_bg.png

: Starting a goroutine for the producer, and then returning the channel it sends on.
: Close the channel when done - this triggers the "clean exit" when consumers are done.
: Ah-ha! You can also use select when sending on a channel.
: Is this goroutine is initially blocked? (It blocks once the channel is full.)
: Note Context - it should be the first parameter by convention.

* Consumer
.code -numbers main.go /func consumer/,/^}/
.background media/plane_bg.png

: Start multiple goroutines reading the channel from the producer.
: Go advises not to use locks. Why is the WaitGroup okay? (WaitGroup is only used to monitor threads, not to share memory between threads.)
: Function blocks until processing is canceled or complete.
: Note that WaitGroup is not exposed to the processing function - why is this cleaner?

* Processor
.code -numbers main.go /func processor/,/^}/
.background media/plane_bg.png

: Reads channel and does work on the item.
: Checks for closed channel, and checks for context done.
: Is this a spin-loop?
: What about in-flight requests? Is closing the producer channel enough? (In this example, it would be.)

* main
.code main.go /func main/,/defer cancel/
.play main.go /Start the producer/,/consumer\(/
.background media/plane_bg.png

: Contexts are always created from other contexts, with context.Background() being the root.
: High-level contexts will cancel lower-level contexts created in the same chain.
: Our case is simple - just a cancel. We use os/signal to capture ^C.

* Take-aways
- Get to know the context package if you don't already.
- Don't communicate by sharing memory, share memory by communicating.
- There is often not a reason for buffered channels.
- Buffering removes synchronization.
- From Rob Pike: "Concurrency is a way to structure a program by breaking it into pieces that can be executed independently."
- Note how each goroutine operates sequentially.
.background media/plane_bg.png

: Context includes timeouts and variables.
: http.Request has a context.
: I often found that buffering deadlocks seemed to "cure" deadlocks - usually reveals a bug though.

* Further Reading
.link https://blog.golang.org/pipelines
.link https://blog.golang.org/context
.link https://golang.org/pkg/context/
.link https://blog.golang.org/concurrency-is-not-parallelism
.link https://talks.golang.org/2012/concurrency.slide
.link https://swtch.com/~rsc/thread/

Event bus example

.link https://levelup.gitconnected.com/lets-write-a-simple-event-bus-in-go-79b9480d8997

.background media/plane_bg.png
